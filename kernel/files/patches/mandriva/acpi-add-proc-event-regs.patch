

---
 drivers/acpi/acpica/Makefile |    2
 drivers/acpi/acpica/Makefile |    2 
 drivers/acpi/acpica/proc.c   |   94 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 95 insertions(+), 1 deletion(-)

--- /dev/null
+++ b/drivers/acpi/acpica/proc.c
@@ -0,0 +1,94 @@
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <asm/uaccess.h>
+
+#include <acpi/acpi.h>
+#include <acpi/acpi_bus.h>
+#include "accommon.h"
+
+#define _COMPONENT		ACPI_SYSTEM_COMPONENT
+ACPI_MODULE_NAME("proc_events")
+
+static char *fixed_event_names[] = { "PMTIMER     ",
+       				     "GLOBAL      ",
+				     "POWER_BUTTON",
+				     "SLEEP_BUTTON",
+				     "RTC         " };
+
+static int acpi_proc_events_seq_show(struct seq_file *seq, void *offset)
+{
+	u32 enabled;
+	int i;
+	ACPI_FUNCTION_TRACE("acpi_proc_events_seq_show");
+
+	seq_printf(seq, "Fixed_Event  Enabled Handler\n");
+	for (i = 0; i < ACPI_NUM_FIXED_EVENTS; i++) {
+		acpi_read_bit_register(acpi_gbl_fixed_event_info[i].
+				       enable_register_id, &enabled);
+		seq_printf(seq, "%s    %s       %s\n",
+				fixed_event_names[i],
+				enabled ? "*" : " ",
+				acpi_gbl_fixed_event_handlers[i].handler ? "*" : " ");
+	}
+	return 0;
+}
+
+static int acpi_proc_events_open_fs(struct inode *inode, struct file *file)
+{
+	return single_open(file, acpi_proc_events_seq_show, PDE(inode)->data);
+}
+
+static ssize_t
+acpi_proc_events_write(struct file *file,
+			const char __user * buffer, size_t count, loff_t * ppos)
+{
+	/* 13 = sizeof("POWER_BUTTON") */
+	char str[13];
+	int error = 0;
+	int i;
+
+	if (count > sizeof(str) - 1)
+		goto Done;
+
+	memset(str, 0, sizeof(str));
+	if (copy_from_user(str, buffer, count))
+		return -EFAULT;
+
+	for (i = 0; i < ACPI_NUM_FIXED_EVENTS; i++) {
+		if ((!strnicmp(str,fixed_event_names[i],count))
+			&& (acpi_gbl_fixed_event_handlers[i].handler != NULL)) {
+			error = acpi_enable_event(i, ACPI_MTX_LOCK);
+		}
+	}
+
+Done:
+	return error ? error : count;
+}
+
+
+static struct file_operations acpi_proc_events_fops = {
+	.open = acpi_proc_events_open_fs,
+	.read = seq_read,
+	.write = acpi_proc_events_write,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static int acpi_proc_events_init(void)
+{
+	struct proc_dir_entry *entry = NULL;
+
+	if (acpi_disabled)
+		return 0;
+
+	/* 'sleep' [R/W] */
+	entry =
+	    create_proc_entry("fixed_events", S_IFREG | S_IRUGO | S_IWUSR,
+			      acpi_root_dir);
+	if (entry)
+		entry->proc_fops = &acpi_proc_events_fops;
+
+	return 0;
+}
+
+late_initcall(acpi_proc_events_init);
--- a/drivers/acpi/acpica/Makefile.orig	2011-03-15 03:20:32.000000000 +0200
+++ a/drivers/acpi/acpica/Makefile	2011-03-20 02:38:15.340314871 +0200
@@ -14,7 +14,7 @@ acpi-y := dsfield.o   dsmthdat.o  dsopco
 
 acpi-y += evevent.o  evregion.o  evsci.o    evxfevnt.o \
 	 evmisc.o   evrgnini.o  evxface.o  evxfregn.o \
-	 evgpe.o    evgpeblk.o evgpeinit.o  evgpeutil.o evxfgpe.o
+	 evgpe.o    evgpeblk.o evgpeinit.o  evgpeutil.o evxfgpe.o proc.o
 
 acpi-y += exconfig.o  exfield.o  exnames.o   exoparg6.o  exresolv.o  exstorob.o\
 	 exconvrt.o  exfldio.o  exoparg1.o  exprep.o    exresop.o   exsystem.o\
